#!/usr/bin/env bash
set -euo pipefail

DRY_RUN=false
FORCE=false

INPUT=/boot/loader
ESP=/boot/efi

while [[ $# -gt 0 ]]; do
    case "$1" in
        -i|--input)
            INPUT="$2"
            shift 2
            ;;
        -o|--output|--efi|--esp)
            ESP="$2"
            shift 2
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            exit 1
            ;;
    esac
done

# 1) figure out which loader directory is active right now
ACTIVE_DIR="$(readlink -f $INPUT)" # â†’ /boot/loader.0  or  /boot/loader.1
echo "Syncing from ${ACTIVE_DIR}"
                 # already mounted by early boot
ACTIVE_DIR="$ACTIVE_DIR/entries"
ENTRIES="$ESP/loader/entries"

# This either outputs the text to a file or echoes it in stdout
output() {
    local txt="$2"
    local file="$1"
    if [ "$DRY_RUN" = true ]; then
        echo "$txt"
    else
        echo "$txt" >> "$ENTRIES/$file"
    fi
}

if [[ $(uname) == "Linux" ]]; then # Disable ESP checking on non-Linux
    [ -d "${ESP}/EFI" ] || { echo "ESP not mounted"; exit 1; } # Expect ESP to be mounted
fi

echo "Files in $ACTIVE_DIR:"
for entry in "$ACTIVE_DIR"/ostree-*.conf; do
    FILE_NAME=$(echo "$entry" | sed -E "s|$ACTIVE_DIR/||g")
    echo "  $FILE_NAME"
    # Check if it's a file (not a directory)
    if [ -f "$entry" ]; then
        INPUT=$(basename "$INPUT")
        FILE=$(echo $FILE_NAME | sed -E 's/\+[^.conf]+//') # Everything except the count
        COUNT=$(echo $FILE_NAME | sed -E 's/.*\+([^\.]+)\..*/\1/')
        BASE=$(echo $FILE | sed -E 's/.conf//g')
        # Allows matching systemd-bless-boot entries
        MATCH=$(find "$ESP/leader/entries" -maxdepth 1 -name "$BASE*.conf" | head -n1 2>/dev/null) 

        if [ -f "$MATCH" ] && [ "$FORCE" = false ] && [ $DRY_RUN = false ]; then
            echo "Existing entry found in $ACTIVE_DIR/$FILE. Use -f to overwrite."
            exit 1
        fi
        while IFS= read -r LINE; do
            if [[ $LINE == options* ]]; then
             # This does not do anything
             # Just included in case options need to be changed
                # read -ra words <<< "$LINE"
                output "$OUTPUT" "$LINE"
            elif [[ $LINE == linux* || $LINE == initrd* ]]; then
                modified_line="${LINE//\/boot/}"
                output "$OUTPUT" "$modified_line"
            elif [[ $LINE == aboot*  ]]; then
                :
            else
                output "$OUTPUT" "$LINE"
            fi
        done < "$entry"
    fi
done

# 3) be sure the systemd-boot binary itself is current
bootctl --path="${ESP}" update >/dev/null 2>&1 || true

echo "ESP sync complete."echo "ESP sync complete."
